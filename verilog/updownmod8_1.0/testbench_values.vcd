$date
	Mon Apr 19 18:13:41 2021
$end
$version
	Icarus Verilog
$end
$timescale
	1us
$end
$scope module testbench $end
$var reg 1 ! clk $end
$var reg 3 " q_expected [2:0] $end
$var reg 1 # rst $end
$var reg 1 $ sel $end
$var integer 32 % run_test [31:0] $end
$var integer 32 & vectornum [31:0] $end
$scope module dut_10 $end
$var wire 1 ! clk $end
$var wire 1 # rst $end
$var wire 1 $ sel $end
$var reg 3 ' q [2:0] $end
$upscope $end
$scope module dut_11 $end
$var wire 1 ! clk $end
$var wire 1 # rst $end
$var wire 1 $ sel $end
$var reg 3 ( q [2:0] $end
$upscope $end
$scope module dut_14 $end
$var wire 1 ! clk $end
$var wire 1 # rst $end
$var wire 1 $ sel $end
$var reg 3 ) q [2:0] $end
$upscope $end
$scope module dut_15 $end
$var wire 1 ! clk $end
$var wire 1 # rst $end
$var wire 1 $ sel $end
$var reg 3 * q [2:0] $end
$upscope $end
$scope module dut_16 $end
$var wire 1 ! clk $end
$var wire 1 # rst $end
$var wire 1 $ sel $end
$var reg 3 + q [2:0] $end
$upscope $end
$scope module dut_17 $end
$var wire 1 ! clk $end
$var wire 1 # rst $end
$var wire 1 $ sel $end
$var reg 3 , q [2:0] $end
$upscope $end
$scope module dut_18 $end
$var wire 1 ! clk $end
$var wire 1 # rst $end
$var wire 1 $ sel $end
$var reg 3 - q [2:0] $end
$upscope $end
$scope module dut_19 $end
$var wire 1 ! clk $end
$var wire 1 # rst $end
$var wire 1 $ sel $end
$var reg 3 . q [2:0] $end
$upscope $end
$scope begin $ivl_for_loop1 $end
$var integer 32 / i [31:0] $end
$upscope $end
$scope begin $ivl_for_loop2 $end
$var integer 32 0 i [31:0] $end
$upscope $end
$scope task testcase $end
$var reg 3 1 q_value [2:0] $end
$var reg 1 2 sel_value $end
$scope begin $ivl_for_loop0 $end
$var integer 32 3 i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 3
x2
bx 1
b0 0
b10100 /
bx .
bx -
bx ,
bx +
bx *
bx )
bx (
bx '
b0 &
b1 %
x$
1#
bx "
0!
$end
#5000
b0 '
b0 (
b0 )
b0 *
b0 +
b0 ,
b0 -
b0 .
1!
#10000
b1 &
0$
b1 "
0!
0#
#15000
b10100 3
b1 1
02
b1 .
b1 -
b1 ,
b1 +
b1 *
b1 )
b1 (
b1 '
1!
#20000
b10 &
b10 "
0!
#25000
b10100 3
b10 '
b10 (
b10 )
b10 *
b10 +
b10 ,
b10 -
b10 .
b10 1
1!
#30000
b11 &
b11 "
0!
#35000
b10100 3
b11 .
b11 -
b11 ,
b11 +
b11 *
b11 )
b11 (
b11 '
b11 1
1!
#40000
b100 &
b100 "
0!
#45000
b10100 3
b100 '
b100 (
b100 )
b100 *
b100 +
b100 ,
b100 -
b100 .
b100 1
1!
#50000
b101 &
b101 "
0!
#55000
b10100 3
b101 .
b101 -
b101 ,
b101 +
b101 *
b101 )
b101 (
b101 '
b101 1
1!
#60000
b110 &
b110 "
0!
#65000
b10100 3
b110 '
b110 (
b110 )
b110 *
b110 +
b110 ,
b110 -
b110 .
b110 1
1!
#70000
b111 &
b111 "
0!
#75000
b10100 3
b111 .
b111 -
b111 ,
b111 +
b111 *
b111 )
b111 (
b111 '
b111 1
1!
#80000
b1000 &
b0 "
0!
#85000
b10100 3
b0 '
b0 (
b0 )
b0 *
b0 +
b0 ,
b0 -
b0 .
b0 1
1!
#90000
b1001 &
b1 "
0!
#95000
b10100 3
b1 .
b1 -
b1 ,
b1 +
b1 *
b1 )
b1 (
b1 '
b1 1
1!
#100000
b1010 &
1$
b0 "
0!
#105000
b10100 3
b0 '
b0 (
b0 )
b0 *
b0 +
b0 ,
b10 -
b0 .
b0 1
12
1!
#110000
b1011 &
b111 "
0!
#115000
b10100 3
b111 .
b11 -
b111 ,
b111 +
b111 *
b111 )
b111 (
b111 '
b111 1
1!
#120000
b1100 &
b110 "
0!
#125000
b10100 3
b110 '
b110 (
b110 )
b110 *
b110 +
b110 ,
b100 -
b110 .
b110 1
1!
#130000
b1101 &
b101 "
0!
#135000
b10100 3
b101 .
b101 -
b101 ,
b101 +
b101 *
b101 )
b101 (
b101 '
b101 1
1!
#140000
b1110 &
b100 "
0!
#145000
b10100 3
b100 '
b100 (
b100 )
b100 *
b100 +
b100 ,
b110 -
b100 .
b100 1
1!
#150000
b1111 &
b11 "
0!
#155000
b10100 3
b11 .
b111 -
b11 ,
b11 +
b11 *
b11 )
b11 (
b11 '
b11 1
1!
#160000
b10000 &
b10 "
0!
#165000
b10100 3
b10 '
b10 (
b10 )
b10 *
b10 +
b10 ,
b0 -
b10 .
b10 1
1!
#170000
b10001 &
b1 "
0!
#175000
b10100 3
b1 .
b1 -
b1 ,
b1 +
b1 *
b1 )
b1 (
b1 '
b1 1
1!
#180000
b10010 &
b0 "
0!
#185000
b10100 3
b0 '
b0 (
b0 )
b0 *
b0 +
b0 ,
b10 -
b0 .
b0 1
1!
#190000
b10011 &
0$
b1 "
0!
#195000
b10100 3
b1 .
b11 -
b1 ,
b1 +
b1 *
b1 )
b1 (
b1 '
b1 1
02
1!
#200000
b10100 &
b10 "
0!
#205000
b10100 3
b10 '
b10 (
b10 )
b10 *
b10 +
b10 ,
b100 -
b10 .
b10 1
1!
#210000
b10101 &
x$
bx "
0!
#211000
b10100 0
