// Declare timescale
`timescale 1ms/1us

// Include all individivuals
`include "tmp/individual_0.sv"
`include "tmp/individual_1.sv"
`include "tmp/individual_2.sv"
`include "tmp/individual_3.sv"
`include "tmp/individual_4.sv"

// Definitions
`define POPULATION_SIZE 5
`define TEST_COUNT 20
`define PERIOD 10
`define CYCLES_PER_TEST 1

// Use parameter to pass population size to testbench
module testbench();
  // Use integer array to store fitness for all individuals
  integer fitness[`POPULATION_SIZE];
  integer run_test;

  // Define inputs and outputs to connect to the individuals
  reg clk;
  reg rst;
	reg sel;
	reg [2:0] q_expected;
	wire [2:0] q_current[`POPULATION_SIZE];

	// Array of testvectors to store expected values
	reg [3:0] testvectors[0:(`TEST_COUNT-1)];
	integer vectornum = 0;

	// Instantiate all the individuals
  individual_0 dut_0(.clk(clk), .rst(rst), .sel(sel), .q(q_current[0]));
  individual_1 dut_1(.clk(clk), .rst(rst), .sel(sel), .q(q_current[1]));
  individual_2 dut_2(.clk(clk), .rst(rst), .sel(sel), .q(q_current[2]));
  individual_3 dut_3(.clk(clk), .rst(rst), .sel(sel), .q(q_current[3]));
  individual_4 dut_4(.clk(clk), .rst(rst), .sel(sel), .q(q_current[4]));

	// Create task to evaluate each testcase
	// Note that this evaluates the entire population for this testcase
	task testcase;
		input sel_value;
		input [2:0] q_value;

		// Initialise inputs
		sel=sel_value;

    // Wait for signals to settle
		#0 for(int i = 0; i < `POPULATION_SIZE; i++) begin
      //$display("q_current[%0d]=%0d, q_value=%0d", i, q_current[i], q_value);
      if(q_current[i] == q_value) begin
          fitness[i] = fitness[i] + 1;
      end
		end
	endtask

	always @(negedge clk) begin
		if (rst == 0) begin
      if(run_test == `CYCLES_PER_TEST) begin
			{sel, q_expected} = testvectors[vectornum];
			vectornum = vectornum + 1;
      run_test = 1;
      end
      else begin
        run_test++;
      end
    end
	end

  always @(posedge clk) begin
		if (rst == 0) begin
      if(run_test == `CYCLES_PER_TEST) begin
        testcase(sel, q_expected);
      end
    end
  end

  // We use a clock to load in our testvectors
  always begin
    #(`PERIOD/2) clk = ~clk;
  end

  // Run simulation
  initial begin
    // DEBUGGING - Dump to vcd file
    $dumpfile("testbench_values.vcd");
    $dumpvars(0,testbench);

    // Read in test vectors
    $readmemb("template/test_vectors.tv", testvectors);

    // Set all scores to zero
    for(int i = 0; i < `POPULATION_SIZE; i++) begin
      fitness[i] = 0;
    end

    run_test = `CYCLES_PER_TEST;

    // Set the clock high so we get posedges at 10,20,30 etc.
    clk = 0; rst = 1;
    #(`PERIOD) rst = 0;
     
    // Wait 8 clock cycles for test to complete
    #(`PERIOD*`TEST_COUNT+1);

    // Print all fitness scores to the console
    for(int i = 0; i < `POPULATION_SIZE; i++) begin
      //$display("%0d, %0d",$time, fitness[i]);
      $display("%0d",fitness[i]);
    end

    $finish;
  end
 endmodule
